<!-- Copyright (c) 2020 Vadim Zhukov <zhuk@openbsd.org>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. -->

<metro:MetroWindow x:Class="PipeExplorer.PipeExplorerMainWindow"
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                   xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                   xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                   xmlns:local="clr-namespace:PipeExplorer"
                   xmlns:res="clr-namespace:PipeExplorer.Properties"
                   xmlns:vm="clr-namespace:PipeExplorer.ViewModels"
                   mc:Ignorable="d"
                   Title="Named Pipes Explorer" Height="450" Width="800"
                   ShowSystemMenu="True"
                   Icon="{Binding AppIcon}"
                   WindowButtonCommandsOverlayBehavior="Always"
                   >
    <Window.DataContext>
        <vm:PipeExplorerViewModel />
    </Window.DataContext>

    <metro:MetroWindow.LeftWindowCommands>
        <metro:WindowCommands>
            <Grid MinWidth="80">
                <Button Command="{Binding StartCmd}"
                        Visibility="{Binding IsRunning, Converter={StaticResource InvertedBooleanToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"
                        Content="{x:Static res:Resources.StartButtonText}"
                        />
                <Button Command="{Binding StopCmd}"
                        Visibility="{Binding IsRunning, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"
                        Content="{x:Static res:Resources.StopButtonText}"
                        />
            </Grid>
        </metro:WindowCommands>
    </metro:MetroWindow.LeftWindowCommands>
    
    <metro:MetroWindow.RightWindowCommands>
        <metro:WindowCommands>
            <TextBox Text="{Binding QuickFilter, UpdateSourceTrigger=PropertyChanged}"
                     metro:TextBoxHelper.Watermark="{x:Static res:Resources.QuickFilter}"
                     metro:TextBoxHelper.ClearTextButton="True"
                     metro:TextBoxHelper.SelectAllOnFocus="True"
                     MinWidth="160"
                     />

            <ToggleButton IsChecked="{Binding IsOpen, Source={x:Reference SettingsFlyout}}"
                          Content="{x:Static res:Resources.Settings}"
                          />
        </metro:WindowCommands>
    </metro:MetroWindow.RightWindowCommands>
    
    <metro:MetroWindow.Flyouts>
        <metro:FlyoutsControl>
            <metro:Flyout x:Name="SettingsFlyout"
                          Header="{x:Static res:Resources.Settings}"
                          Position="Right"
                          Width="400"
                          >
                <StackPanel Margin="12">
                    <metro:ToggleSwitch IsOn="{Binding StartImmediately}"
                                        Header="{x:Static res:Resources.SettingsStartImmediatelyHeader}"
                                        OnContent="{x:Static res:Resources.SettingsStartImmediatelyOn}"
                                        OffContent="{x:Static res:Resources.SettingsStartImmediatelyOff}"
                                        />

                    <DockPanel Margin="0, 8">
                        <metro:NumericUpDown DockPanel.Dock="Right"
                                             x:Name="RefereshIntervalBox"
                                             Value="{Binding RefreshInterval}"
                                             StringFormat="{x:Static res:Resources.SettingsRefreshIntervalStringFormat}"
                                             Minimum="1" Maximum="99999"
                                             ParsingNumberStyle="AllowThousands"
                                             InterceptArrowKeys="True"
                                             ButtonsAlignment="Opposite"
                                             SwitchUpDownButtons="True"
                                             MinWidth="100"
                                             />
                        <Label Target="{x:Reference RefereshIntervalBox}"
                               FontSize="14"
                               Content="{x:Static res:Resources.SettingsRefreshInterval}"
                               />
                    </DockPanel>

                    <DockPanel Margin="0, 8">
                        <metro:NumericUpDown DockPanel.Dock="Right"
                                             x:Name="HighlightDurationBox"
                                             Value="{Binding HighlightDuration}"
                                             StringFormat="{x:Static res:Resources.SettingsRefreshIntervalStringFormat}"
                                             Minimum="0" Maximum="99999"
                                             ParsingNumberStyle="AllowThousands"
                                             InterceptArrowKeys="True"
                                             ButtonsAlignment="Opposite"
                                             SwitchUpDownButtons="True"
                                             MinWidth="100"
                                             />
                        <Label Target="{x:Reference HighlightDurationBox}"
                               FontSize="14"
                               Content="{x:Static res:Resources.SettingsHighlightDuration}"
                               />
                    </DockPanel>
                </StackPanel>
            </metro:Flyout>
        </metro:FlyoutsControl>
    </metro:MetroWindow.Flyouts>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <ListView Grid.Row="1" ItemsSource="{Binding Pipes}">
            <ListView.View>
                <GridView AllowsColumnReorder="True">
                    <GridViewColumn x:Name="ColumnName" DisplayMemberBinding="{Binding Name}" Header="{x:Static res:Resources.PipeListHeaderName}" />
                    <GridViewColumn x:Name="ColumnConnections" DisplayMemberBinding="{Binding Connections}" Header="{x:Static res:Resources.PipeListHeaderConnections}" />
                    <GridViewColumn x:Name="ColumnCreated" DisplayMemberBinding="{Binding Created}" Header="{x:Static res:Resources.PipeListHeaderCreated}" />
                    <GridViewColumn x:Name="ColumnHint" DisplayMemberBinding="{Binding Hint}" Header="{x:Static res:Resources.PipeListHeaderComment}" />
                </GridView>
            </ListView.View>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding BeingRemoved}" Value="True">
                            <Setter Property="Background" Value="Red" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RecentlyUpdated}" Value="True">
                            <Setter Property="Background" Value="Yellow" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RecentlyAdded}" Value="True">
                            <Setter Property="Background" Value="LightGreen" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListView>
    </Grid>
</metro:MetroWindow>
